# -*- coding: utf-8 -*-
"""Intro Google Colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRk00mFZ1gqgoZEtFMPRwhR5XpWD-aoB

#Introduction to Google Colab Research Notebook
The google colab research environment is powered by IPython notebooks, which allow one to perform a great deal of data analysis and statistical validation. We'll demonstrate basic walkthrough of the colab notebook environment.

##Code Cells vs. Text Cells
As you can see, each cell can be either code or text. To select between them, choose from the `+ Code` or `+ Text`.
One can take advantage of markdown scripts in `Text`.
"""



"""this is a text cell where one can take full advantage of ***markdown*** and also latex scripts as `$ <script> $` which renders mathmatical equations as $ f_{X|Y=a}(b) $

## Executing commands
"""

#simple arithmetics
2 + 2

#assigning variables
X = 2
Y = 3 
X + Y

#printing statements
print("2 + 3 = ", 5)

#shell commands can be executed using !
#Example to list all the files and directories of the current working directory
!ls

#to install a python library using pip
!pip install numpy

"""##Knowing When a Cell is Running
While a cell is running, a [*] will display on the left. When a cell has yet to be executed, [ ] will display. When it has been run, a number will display indicating the order in which it was run during the execution of the notebook [5]. Try on this cell and note it happening.

"""

#Take some time to run something
c = 0
for i in range(10000000):
    c = c + i
c

"""## Importing Libraries
Majority of the time, you'll want to use functions from pre-built libraries. You can't import every library on google colab by default, but you can always `pip install` the required library. Here I import numpy and pandas, the two most common and useful libraries in data analysis. <br> <br>
Notice that you can rename libraries to whatever you want after importing. The as statement allows this. Here we use np and pd as aliases for numpy and pandas. This is a very common aliasing and will be found in most code snippets around the web. The point behind this is to allow you to type fewer characters when you are frequently accessing these libraries.
"""

#This a numerical computation library to work with array's and metrices
import numpy as np

#This is a library to manipulate data and perform aggregate operations on data.
import pandas as pd

# This is a plotting library for pretty pictures.
import matplotlib.pyplot as plt



"""## Loading files in colab
For reading the data present in a files such as .csv, .xlsx, .jpg etc. you must load the file in colab session. We will see a few ways of loading files.

### Loading data from local storage
To upload from your local drive, start with the following code:
"""

# from local storage
from google.colab import files
uploaded = files.upload()

# attach file after uploading
import io
df_local = pd.read_csv(io.BytesIO(uploaded['AAPL.csv']))
df_local

"""#Loading from Session Upload

## Getting Documentation Help
Placing a question mark after a function and executing that line of code will give you the documentation IPython has for that function. It's often best to do this in a new cell, as you avoid re-executing other code and running into bugs.
"""

np.random.normal?

from google.colab import drive
drive.mount("/content/drive")

df_gdrive = pd.read_csv("/content/drive/MyDrive/Data collection/AAPL.csv")

df_gdrive.head()

df = pd.read_csv("AAPL.csv")
df.head()

"""## Basics of Pandas Dataframe """

df.shape

#descriptive stats of the dataframe
df.describe()

#setting setting index column
df = df.set_index("Low")
df.head()

"""## Plotting

"""

df['Close']  #cloumn from data sheet

#plotting line graphs from Pandas columns
df['Close'].plot(figsize=(10,6));
plt.title("AAPL price")

df['Close'].plot()

df['Close'].plot(figsize=(19,4));

df['Close'].plot(figsize=(19,4));
plt.title("APPLE STOCK PRICE")



"""### Finding returns from prices
$$r_{t} = \frac{P_{t} - P_{t-1}}{P_{t-1}}$$

to find the return of a Pandas series (which can be column of a Pandas DataFrame) one can use `.pct_change()` method as shown below.
"""

returns = df['Close'].pct_change()
returns.plot();

returns.plot()

#histogram of price returns
returns.plot(kind="hist", bins=15);

#box plot of price returns
returns.plot(kind="box");

"""For more details on usage and examples of Numpy, Pandas and Matplotlib view the official documentations. 

* Numpy : https://numpy.org/
* Pandas : https://pandas.pydata.org/
* Matplotlib : https://matplotlib.org/
"""

